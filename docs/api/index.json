[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/Context.jsx",
    "content": "import {createContext} from 'react';\n\nexport const {Provider, Consumer} = createContext();\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Context.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "Provider",
    "memberof": "src/Context.jsx",
    "static": true,
    "longname": "src/Context.jsx~Provider",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Context.jsx",
    "importStyle": "{Provider}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "name": "src/Control/Collection.jsx",
    "content": "import T from 'prop-types';\nimport React, {Component} from 'react';\nimport {LifePod} from '../index';\n\nfunction getCleanIndex(index = 0) {\n  const parsedIndex = parseInt(`${index}`, 10);\n  const repairedIndex = `${parsedIndex}` === 'NaN' ? 0 : parsedIndex;\n\n  return repairedIndex < 0 ? 0 : repairedIndex;\n}\n\nexport default class Collection extends Component {\n  static propTypes = {\n    name: T.string,\n    dependencyPath: T.oneOfType([\n      T.string,\n      T.arrayOf(\n        T.string\n      )\n    ]),\n    primaryKey: T.string\n  };\n  defaultProps = {\n    primaryKey: 'id'\n  };\n\n  controller;\n\n  getController() {\n    if (!this.controller) {\n      this.controller = {\n        addItems: this.addItems,\n        addItem: this.addItem,\n        addItemsAtIndex: this.addItemsAtIndex,\n        addItemAtIndex: this.addItemAtIndex,\n        removeItem: this.removeItem,\n        removeItemAtIndex: this.removeItemAtIndex,\n        removeItemByPrimaryKeyValue: this.removeItemByPrimaryKeyValue,\n        getIndicesForItem: this.getIndicesForItem,\n        getItemAtIndex: this.getItemAtIndex,\n        getItemByPrimaryKeyValue: this.getItemByPrimaryKeyValue,\n        getMapByPrimaryKey: this.getMapByPrimaryKey,\n        setFromMap: this.setFromMap,\n        addFromMap: this.addFromMap,\n        moveItemByIndex: this.moveItemByIndex,\n        switchItemsByIndices: this.switchItemsByIndices,\n        switchItems: this.switchItems,\n        updateItemByPrimaryKeyValue: this.updateItemByPrimaryKeyValue,\n        updateItem: this.updateItem,\n        updateItemsByMap: this.updateItemsByMap,\n        clear: this.clear\n      };\n    }\n\n    return this.controller;\n  }\n\n  getDepValue;\n  setDepValue;\n\n  getCurrentDepValue() {\n    let value;\n\n    if (this.getDepValue instanceof Function) {\n      value = this.getDepValue();\n\n      if (!(value instanceof Array)) {\n        value = [];\n      }\n    }\n\n    return value;\n  }\n\n  setNewDepValue(value = []) {\n    if (this.setDepValue instanceof Function) {\n      this.setDepValue(value);\n    }\n  }\n\n  addItems = (items = []) => {\n    const value = this.getCurrentDepValue();\n\n    this.setNewDepValue([\n      ...value,\n      ...items\n    ]);\n  };\n\n  addItem = (item) => {\n    this.addItems([item]);\n  };\n\n  addItemsAtIndex = (items = [], index = 0) => {\n    const value = this.getCurrentDepValue();\n    const cleanIndex = getCleanIndex(index);\n\n    if (cleanIndex >= value.length) {\n      this.addItems(items);\n    } else {\n      const before = value.slice(0, cleanIndex);\n      const after = value.slice(cleanIndex, value.length);\n\n      this.setNewDepValue([\n        ...before,\n        ...items,\n        ...after\n      ]);\n    }\n  };\n\n  addItemAtIndex = (item, index = 0) => {\n    this.addItemsAtIndex([item], index);\n  };\n\n  removeItem = (item) => {\n    const value = this.getCurrentDepValue();\n\n    this.setNewDepValue(\n      value.filter(v => v !== item)\n    );\n  };\n\n  removeItemAtIndex = (index = 0) => {\n    const value = this.getCurrentDepValue();\n    const cleanIndex = getCleanIndex(index);\n\n    this.setNewDepValue(\n      value.filter((v, i) => i !== cleanIndex)\n    );\n  };\n\n  removeItemByPrimaryKeyValue = (primaryKeyValue) => {\n    const {primaryKey} = this.props;\n    const value = this.getCurrentDepValue();\n\n    this.setNewDepValue(\n      value.filter(({[primaryKey]: pkv} = {}) => pkv !== primaryKeyValue)\n    );\n  };\n\n  getIndicesForItem = (item) => {\n    const value = this.getCurrentDepValue();\n\n    return value.reduce((acc, v, i) => {\n      if (v === item) {\n        acc.push(i);\n      }\n\n      return acc;\n    }, []);\n  };\n\n  getItemAtIndex = (index = 0) => {\n    const value = this.getCurrentDepValue();\n    const cleanIndex = getCleanIndex(index);\n\n    return value[cleanIndex];\n  };\n\n  getItemByPrimaryKeyValue = (primaryKeyValue) => {\n    const {primaryKey} = this.props;\n    const value = this.getCurrentDepValue();\n\n    return value.filter(({[primaryKey]: v} = {}) => v === primaryKeyValue)[0];\n  };\n\n  getMapByPrimaryKey = () => {\n    const {primaryKey} = this.props;\n    const value = this.getCurrentDepValue();\n\n    return value.reduce((acc, item = {}) => {\n      const {[primaryKey]: primaryKeyValue} = item;\n\n      acc[primaryKeyValue] = item;\n\n      return acc;\n    }, {});\n  };\n\n  setFromMap = (map = {}) => {\n    this.setNewDepValue(\n      Object\n        .keys(map)\n        .map(k => map[k])\n    );\n  };\n\n  addFromMap = (map = {}) => {\n    const valueMap = this.getMapByPrimaryKey();\n    const fullMap = {\n      ...valueMap,\n      ...map\n    };\n\n    this.setNewDepValue(\n      Object\n        .keys(fullMap)\n        .map(k => fullMap[k])\n    );\n  };\n\n  moveItemByIndex = (fromIndex = 0, toIndex = 0) => {\n    const cleanFromIndex = getCleanIndex(fromIndex);\n    const cleanToIndex = getCleanIndex(toIndex);\n\n    if (cleanFromIndex !== cleanToIndex) {\n      const item = this.getItemAtIndex(cleanFromIndex);\n      const value = this.getCurrentDepValue();\n\n      let newDepValue;\n\n      if (cleanToIndex >= value.length) {\n        newDepValue = [\n          ...value,\n          item\n        ];\n      } else {\n        newDepValue = value.reduce((acc, v, i) => {\n          if (i === cleanToIndex) {\n            acc.push(item);\n          }\n\n          if (i !== cleanFromIndex) {\n            acc.push(v);\n          }\n\n          return acc;\n        }, []);\n      }\n\n      this.setNewDepValue(\n        newDepValue\n      );\n    }\n  };\n\n  switchItemsByIndices = (indexA = 0, indexB = 0) => {\n    const value = this.getCurrentDepValue();\n    const cleanIndexA = getCleanIndex(indexA);\n    const cleanIndexB = getCleanIndex(indexB);\n\n    if (cleanIndexA !== cleanIndexB) {\n      const itemA = this.getItemAtIndex(cleanIndexA);\n      const itemB = this.getItemAtIndex(cleanIndexB);\n\n      this.setNewDepValue(\n        value.reduce((acc, v, i) => {\n          if (i === cleanIndexA) {\n            acc.push(itemB);\n          } else if (i === cleanIndexB) {\n            acc.push(itemA);\n          } else {\n            acc.push(v);\n          }\n\n          return acc;\n        }, [])\n      );\n    }\n  };\n\n  switchItems = (itemA, itemB) => {\n    const indexA = this.getIndicesForItem(itemA)[0];\n    const indexB = this.getIndicesForItem(itemB)[0];\n\n    if (typeof indexA !== 'undefined' && typeof indexB !== 'undefined') {\n      this.switchItemsByIndices(indexA, indexB);\n    }\n  };\n\n  updateItemByPrimaryKeyValue = (primaryKeyValue, item) => {\n    const {primaryKey} = this.props;\n    const value = this.getCurrentDepValue();\n\n    this.setNewDepValue(\n      value.map((v = {}) => {\n        const {[primaryKey]: pkv} = v;\n\n        return pkv === primaryKeyValue ? item : v;\n      })\n    );\n  };\n\n  updateItem = (item) => {\n    if (item instanceof Object) {\n      const {primaryKey} = this.props;\n      const {[primaryKey]: primaryKeyValue} = item;\n\n      this.updateItemByPrimaryKeyValue(primaryKeyValue, item);\n    }\n  };\n\n  updateItemsByMap = (map = {}) => {\n    const {primaryKey} = this.props;\n    const value = this.getCurrentDepValue();\n\n    this.setNewDepValue(\n      value.map((v = {}) => {\n        const {[primaryKey]: pkv} = v;\n\n        return map.hasOwnProperty(pkv) ? map[pkv] : v;\n      })\n    );\n  };\n\n  clear = () => {\n    this.setNewDepValue([]);\n  };\n\n  render() {\n    const {\n      name,\n      dependencyPath\n    } = this.props;\n\n    return (\n      <LifePod\n        name={name}\n        getters={{\n          depValue: dependencyPath\n        }}\n        setters={{\n          depValue: dependencyPath\n        }}\n        factory={({getDepValue, setDepValue} = {}) => {\n          this.getDepValue = getDepValue;\n          this.setDepValue = setDepValue;\n\n          return this.getController();\n        }}\n      />\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Control/Collection.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "getCleanIndex",
    "memberof": "src/Control/Collection.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Control/Collection.jsx~getCleanIndex",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/Control/Collection.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 4,
    "kind": "class",
    "name": "Collection",
    "memberof": "src/Control/Collection.jsx",
    "static": true,
    "longname": "src/Control/Collection.jsx~Collection",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Control/Collection.jsx",
    "importStyle": "Collection",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": true,
    "longname": "src/Control/Collection.jsx~Collection.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "controller",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#controller",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "getController",
    "memberof": "src/Control/Collection.jsx~Collection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#getController",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "member",
    "name": "getDepValue",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#getDepValue",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "name": "setDepValue",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#setDepValue",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "getCurrentDepValue",
    "memberof": "src/Control/Collection.jsx~Collection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#getCurrentDepValue",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "setNewDepValue",
    "memberof": "src/Control/Collection.jsx~Collection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#setNewDepValue",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": null
  },
  {
    "__docId__": 14,
    "kind": "member",
    "name": "addItems",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#addItems",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "name": "addItem",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#addItem",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "name": "addItemsAtIndex",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#addItemsAtIndex",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "name": "addItemAtIndex",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#addItemAtIndex",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "name": "removeItem",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#removeItem",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "removeItemAtIndex",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#removeItemAtIndex",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "removeItemByPrimaryKeyValue",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#removeItemByPrimaryKeyValue",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "getIndicesForItem",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#getIndicesForItem",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "getItemAtIndex",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#getItemAtIndex",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "getItemByPrimaryKeyValue",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#getItemByPrimaryKeyValue",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "getMapByPrimaryKey",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#getMapByPrimaryKey",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "setFromMap",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#setFromMap",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "addFromMap",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#addFromMap",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "member",
    "name": "moveItemByIndex",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#moveItemByIndex",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "member",
    "name": "switchItemsByIndices",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#switchItemsByIndices",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "member",
    "name": "switchItems",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#switchItems",
    "access": "public",
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "member",
    "name": "updateItemByPrimaryKeyValue",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#updateItemByPrimaryKeyValue",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "member",
    "name": "updateItem",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#updateItem",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "updateItemsByMap",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#updateItemsByMap",
    "access": "public",
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "clear",
    "memberof": "src/Control/Collection.jsx~Collection",
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#clear",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "render",
    "memberof": "src/Control/Collection.jsx~Collection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/Collection.jsx~Collection#render",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "file",
    "name": "src/Control/ExplicitlyCachedValue.jsx",
    "content": "import T from 'prop-types';\nimport React, {Component} from 'react';\nimport {LifePod} from '../index';\n\n/**\n * Use this controller to safeguard against unnecessary updates due to the\n * nature of the invalidation chain.\n * */\nexport default class ExplicitlyCachedValue extends Component {\n  static propTypes = {\n    name: T.string,\n    dependencyPath: T.string\n  };\n\n  value;\n  unlisten;\n\n  componentWillUnmount() {\n    if (this.unlisten instanceof Function) {\n      this.unlisten();\n    }\n  }\n\n  render() {\n    const {\n      name,\n      dependencyPath = ''\n    } = this.props;\n\n    return (\n      <LifePod\n        name={name}\n        getters={{\n          getValue: dependencyPath\n        }}\n        setters={{\n          setCachedValue: name\n        }}\n        listeners={{\n          onValueChange: dependencyPath\n        }}\n        override\n        factory={({\n                    getValue,\n                    onValueChange,\n                    setCachedValue\n                  } = {}) => {\n          if (!(this.unlisten instanceof Function)) {\n            this.unlisten = onValueChange(() => {\n              const depValue = getValue();\n\n              if (typeof depValue !== 'undefined') {\n                this.value = depValue;\n\n                setCachedValue(this.value);\n              }\n            });\n\n            this.value = getValue();\n          }\n\n          return this.value;\n        }}\n      />\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Control/ExplicitlyCachedValue.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 38,
    "kind": "class",
    "name": "ExplicitlyCachedValue",
    "memberof": "src/Control/ExplicitlyCachedValue.jsx",
    "static": true,
    "longname": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Control/ExplicitlyCachedValue.jsx",
    "importStyle": "ExplicitlyCachedValue",
    "description": "Use this controller to safeguard against unnecessary updates due to the\nnature of the invalidation chain.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 39,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue",
    "static": true,
    "longname": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "member",
    "name": "value",
    "memberof": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue",
    "static": false,
    "longname": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue#value",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "member",
    "name": "unlisten",
    "memberof": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue",
    "static": false,
    "longname": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue#unlisten",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "render",
    "memberof": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/ExplicitlyCachedValue.jsx~ExplicitlyCachedValue#render",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "file",
    "name": "src/Control/Memoize.jsx",
    "content": "import T from 'prop-types';\nimport React, {Component} from 'react';\nimport {LifePod} from '../index';\n\nexport default class Memoize extends Component {\n  static propTypes = {\n    name: T.string,\n    dependencyPath: T.oneOfType([\n      T.string,\n      T.arrayOf(\n        T.string\n      )\n    ])\n  };\n\n  value = [];\n\n  render() {\n    const {\n      name,\n      dependencyPath\n    } = this.props;\n\n    return (\n      <LifePod\n        name={name}\n        dependencies={{\n          depValue: dependencyPath\n        }}\n        override\n        factory={({depValue} = {}) => {\n          this.value = [\n            ...this.value,\n            depValue\n          ];\n\n          return [\n            ...this.value\n          ];\n        }}\n      />\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Control/Memoize.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 48,
    "kind": "class",
    "name": "Memoize",
    "memberof": "src/Control/Memoize.jsx",
    "static": true,
    "longname": "src/Control/Memoize.jsx~Memoize",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Control/Memoize.jsx",
    "importStyle": "Memoize",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Control/Memoize.jsx~Memoize",
    "static": true,
    "longname": "src/Control/Memoize.jsx~Memoize.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "value",
    "memberof": "src/Control/Memoize.jsx~Memoize",
    "static": false,
    "longname": "src/Control/Memoize.jsx~Memoize#value",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "render",
    "memberof": "src/Control/Memoize.jsx~Memoize",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/Memoize.jsx~Memoize#render",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/Control/Traverse.jsx",
    "content": "import T from 'prop-types';\nimport React, {Component} from 'react';\nimport {LifePod} from '../index';\n\nexport default class Traverse extends Component {\n  static propTypes = {\n    name: T.string,\n    dependencyPath: T.oneOfType([\n      T.string,\n      T.arrayOf(\n        T.string\n      )\n    ])\n  };\n\n  controller;\n\n  getController() {\n    if (!this.controller) {\n      this.controller = {\n        back: this.back,\n        forward: this.forward,\n        clear: this.clear,\n        canUndo: this.canUndo,\n        canRedo: this.canRedo\n      };\n    }\n\n    return this.controller;\n  }\n\n  setDepValue;\n\n  past = [];\n  present;\n  future = [];\n\n  moveCursor = (offset = 0) => {\n    const parsedOffset = parseInt(`${offset}`, 10);\n    const cleanOffset = `${parsedOffset}` !== 'NaN' ? parsedOffset : 0;\n\n    if (cleanOffset !== 0) {\n      const currentIndex = this.past.length;\n      const fullHistory = [\n        ...this.past,\n        this.present,\n        ...this.future\n      ];\n\n      let newIndex = currentIndex + cleanOffset;\n\n      if (newIndex > fullHistory.length - 1) {\n        newIndex = fullHistory.length - 1;\n      }\n\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n\n      this.past = fullHistory.slice(0, newIndex);\n      this.present = fullHistory[newIndex];\n      this.future = fullHistory.slice(newIndex + 1, fullHistory.length);\n\n      if (this.setDepValue instanceof Function) {\n        // Update the target dependency.\n        this.setDepValue(this.present);\n      }\n    }\n  };\n\n  back = (offset = 1) => {\n    const cleanOffset = typeof offset === 'number' || typeof offset === 'string' ? offset : 1;\n\n    this.moveCursor(cleanOffset * -1);\n  };\n\n  firstUpdate = true;\n\n  updatePresent = (depValue) => {\n    if (depValue !== this.present) {\n      if (this.firstUpdate) {\n        this.firstUpdate = false;\n      } else {\n        this.past = [\n          ...this.past,\n          this.present\n        ];\n      }\n      this.present = depValue;\n      this.future = [];\n    }\n  };\n\n  forward = (offset = 1) => {\n    const cleanOffset = typeof offset === 'number' || typeof offset === 'string' ? offset : 1;\n\n    this.moveCursor(cleanOffset);\n  };\n\n  clear = () => {\n    this.past = [];\n    this.future = [];\n  };\n\n  canUndo = () => {\n    return this.past instanceof Array && this.past.length > 0;\n  };\n\n  canRedo = () => {\n    return this.future instanceof Array && this.future.length > 0;\n  };\n\n  render() {\n    const {\n      name,\n      dependencyPath\n    } = this.props;\n\n    return (\n      <LifePod\n        name={name}\n        dependencies={{\n          depValue: dependencyPath\n        }}\n        setters={{\n          setDepValue: dependencyPath\n        }}\n        factory={({depValue, setDepValue} = {}) => {\n          this.setDepValue = setDepValue;\n          this.updatePresent(depValue);\n\n          return this.getController();\n        }}\n      />\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Control/Traverse.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "Traverse",
    "memberof": "src/Control/Traverse.jsx",
    "static": true,
    "longname": "src/Control/Traverse.jsx~Traverse",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Control/Traverse.jsx",
    "importStyle": "Traverse",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": true,
    "longname": "src/Control/Traverse.jsx~Traverse.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "controller",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#controller",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "getController",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#getController",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "setDepValue",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#setDepValue",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "past",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#past",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "present",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#present",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "future",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#future",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "moveCursor",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#moveCursor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "back",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#back",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "firstUpdate",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#firstUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "updatePresent",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#updatePresent",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "forward",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#forward",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "clear",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#clear",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "canUndo",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#canUndo",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "canRedo",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#canRedo",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "render",
    "memberof": "src/Control/Traverse.jsx~Traverse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Control/Traverse.jsx~Traverse#render",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/Future/ItemState.jsx",
    "content": "import T from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport {\n  Collection,\n  Incarnate,\n  LifePod\n} from '../index';\n\nexport default class ItemState extends PureComponent {\n  static propTypes = {\n    name: T.string\n  };\n\n  controller;\n\n  getController() {\n    if (!this.controller) {\n      this.controller = {};\n    }\n\n    return this.controller;\n  }\n\n  render() {\n    const {\n      name,\n      dependencyPath\n    } = this.props;\n\n    return (\n      <Incarnate\n        name={name}\n      >\n        <LifePod\n          name='Selected'\n        />\n        <LifePod\n          name='New'\n        />\n        <LifePod\n          name='Existing'\n        />\n        <LifePod\n          name='Changed'\n        />\n        <LifePod\n          name='Removed'\n        />\n        <LifePod\n          name='Detailed'\n        />\n        <Incarnate\n          name='CollectionControllers'\n          shared={{\n            Selected: 'Selected',\n            New: 'New',\n            Existing: 'Existing',\n            Changed: 'Changed',\n            Removed: 'Removed',\n            Detailed: 'Detailed'\n          }}\n        >\n          <Collection\n            name='Selected'\n            dependencyPath='Selected'\n          />\n          <Collection\n            name='New'\n            dependencyPath='New'\n          />\n          <Collection\n            name='Existing'\n            dependencyPath='Existing'\n          />\n          <Collection\n            name='Changed'\n            dependencyPath='Changed'\n          />\n          <Collection\n            name='Removed'\n            dependencyPath='Removed'\n          />\n          <Collection\n            name='Detailed'\n            dependencyPath='Detailed'\n          />\n        </Incarnate>\n        <LifePod\n          name='Controller'\n          factory={() => {\n\n\n            return this.getController();\n          }}\n        />\n      </Incarnate>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Future/ItemState.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "ItemState",
    "memberof": "src/Future/ItemState.jsx",
    "static": true,
    "longname": "src/Future/ItemState.jsx~ItemState",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Future/ItemState.jsx",
    "importStyle": "ItemState",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~PureComponent"
    ]
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Future/ItemState.jsx~ItemState",
    "static": true,
    "longname": "src/Future/ItemState.jsx~ItemState.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "controller",
    "memberof": "src/Future/ItemState.jsx~ItemState",
    "static": false,
    "longname": "src/Future/ItemState.jsx~ItemState#controller",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getController",
    "memberof": "src/Future/ItemState.jsx~ItemState",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Future/ItemState.jsx~ItemState#getController",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "render",
    "memberof": "src/Future/ItemState.jsx~ItemState",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Future/ItemState.jsx~ItemState#render",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/Future/ItemStateController.jsx",
    "content": "import T from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport Incarnate from '../Incarnate';\n\nexport const DEFAULT_PRIMARY_KEY = 'id';\nexport const STATES = {\n  SELECTED: 'SELECTED',\n  NEW: 'NEW',\n  EXISTING: 'EXISTING',\n  CHANGED: 'CHANGED',\n  DELETED: 'DELETED',\n  ALL: 'ALL'\n};\nexport const SETS = {\n  ACTIVE: 'ACTIVE',\n  ITEMS: 'ITEMS',\n  ERRORS: 'ERRORS'\n};\nexport const OPERATIONS = {\n  SELECT: 'SELECT',\n  DESELECT: 'DESELECT',\n  TOGGLE_SELECTION: 'TOGGLE_SELECTION',\n  CREATE: 'CREATE',\n  READ: 'READ',\n  UPDATE: 'UPDATE',\n  DELETE: 'DELETE',\n  RECONCILE: 'RECONCILE',\n  IS: 'IS'\n};\n\nexport function updateList(list = [], replace = {}, remove = []) {\n  return list\n    .map((item, index) => replace.hasOwnProperty(index) ? replace[index] : item)\n    .filter(item => remove.indexOf(item) === -1);\n}\n\nconst ITEM_IN_MAP_TESTER_FACTORY_FACTORY = (primaryKey = DEFAULT_PRIMARY_KEY) => {\n  return (getItemMap) => {\n    return ({[primaryKey]: key} = {}) => {\n      const {[key]: item} = getItemMap() || {};\n\n      return !!item;\n    };\n  };\n};\n\nexport default class ItemStateController extends PureComponent {\n  static propTypes = {\n    name: T.string,\n    primaryKey: T.string,\n    reconciliationMap: T.shape({\n      [STATES.NEW]: T.func,\n      [STATES.EXISTING]: T.func,\n      [STATES.CHANGED]: T.func,\n      [STATES.DELETED]: T.func\n    })\n  };\n  static defaultProps = {\n    primaryKey: DEFAULT_PRIMARY_KEY,\n    reconciliationMap: {}\n  };\n\n  render() {\n    const {\n      name,\n      primaryKey,\n      reconciliationMap = {},\n      ...props\n    } = this.props;\n    const map = {\n      [SETS.ACTIVE]: {\n        subMap: {\n          [STATES.NEW]: {\n            required: [],\n            factory: () => false\n          },\n          [STATES.EXISTING]: {\n            required: [],\n            factory: () => false\n          },\n          [STATES.CHANGED]: {\n            required: [],\n            factory: () => false\n          },\n          [STATES.DELETED]: {\n            required: [],\n            factory: () => false\n          },\n          [STATES.ALL]: {\n            required: [\n              STATES.NEW,\n              STATES.EXISTING,\n              STATES.CHANGED,\n              STATES.DELETED\n            ],\n            factory: (\n              newActive,\n              existingActive,\n              changedActive,\n              deletedActive\n            ) => newActive || existingActive || changedActive || deletedActive\n          }\n        }\n      },\n      [SETS.ITEMS]: {\n        subMap: {\n          [STATES.SELECTED]: {\n            factory: () => []\n          },\n          [STATES.NEW]: {\n            factory: () => []\n          },\n          [STATES.EXISTING]: {\n            factory: () => ({})\n          },\n          [STATES.CHANGED]: {\n            factory: () => []\n          },\n          [STATES.DELETED]: {\n            factory: () => []\n          },\n          [STATES.ALL]: {\n            required: [\n              STATES.NEW,\n              STATES.EXISTING,\n              STATES.CHANGED,\n              STATES.DELETED\n            ],\n            factory: (\n              newItems = [],\n              existingItems = {},\n              changedItems = {},\n              deletedItems = {}\n            ) => {\n              // Transpose changes.\n              const updatedMap = {\n                ...existingItems,\n                ...changedItems\n              };\n              // Remove deletes.\n              const cleanMap = Object\n                .keys(updatedMap)\n                .reduce((acc, key) => {\n                  if (!deletedItems.hasOwnProperty(key)) {\n                    acc[key] = updatedMap[key];\n                  }\n\n                  return acc;\n                }, {});\n\n              // Combine new and clean.\n              return [\n                ...newItems,\n                ...Object\n                  .keys(cleanMap)\n                  .map(key => cleanMap[key])\n              ];\n            }\n          }\n        }\n      },\n      [SETS.ERRORS]: {\n        subMap: {\n          [STATES.NEW]: {\n            factory: () => []\n          },\n          [STATES.EXISTING]: {\n            factory: () => []\n          },\n          [STATES.CHANGED]: {\n            factory: () => []\n          },\n          [STATES.DELETED]: {\n            factory: () => []\n          },\n          [STATES.ALL]: {\n            required: [\n              STATES.NEW,\n              STATES.EXISTING,\n              STATES.CHANGED,\n              STATES.DELETED\n            ],\n            factory: (\n              newErrors = [],\n              existingErrors = {},\n              changedErrors = {},\n              deletedErrors = {}\n            ) => [\n              ...newErrors,\n              ...Object\n                .keys(existingErrors)\n                .map(key => existingErrors[key]),\n              ...Object\n                .keys(changedErrors)\n                .map(key => changedErrors[key]),\n              ...Object\n                .keys(deletedErrors)\n                .map(key => deletedErrors[key]),\n            ]\n          }\n        }\n      },\n      [OPERATIONS.IS]: {\n        subMap: {\n          [STATES.SELECTED]: {\n            getters: [\n              [SETS.ITEMS, STATES.SELECTED]\n            ],\n            factory: (getSelected) => {\n              return (item) => {\n                const selected = getSelected() || [];\n\n                return selected.indexOf(item) !== -1;\n              };\n            }\n          },\n          [STATES.NEW]: {\n            getters: [\n              [SETS.ITEMS, STATES.NEW]\n            ],\n            factory: (getNew) => {\n              return (item) => {\n                const newItems = getNew() || [];\n\n                return newItems.indexOf(item) !== -1;\n              };\n            }\n          },\n          [STATES.EXISTING]: {\n            getters: [\n              [SETS.ITEMS, STATES.EXISTING]\n            ],\n            factory: ITEM_IN_MAP_TESTER_FACTORY_FACTORY(primaryKey)\n          },\n          [STATES.CHANGED]: {\n            getters: [\n              [SETS.ITEMS, STATES.CHANGED]\n            ],\n            factory: ITEM_IN_MAP_TESTER_FACTORY_FACTORY(primaryKey)\n          },\n          [STATES.DELETED]: {\n            getters: [\n              [SETS.ITEMS, STATES.DELETED]\n            ],\n            factory: ITEM_IN_MAP_TESTER_FACTORY_FACTORY(primaryKey)\n          },\n          [STATES.ALL]: {\n            required: [\n              STATES.SELECTED,\n              STATES.NEW,\n              STATES.EXISTING,\n              STATES.CHANGED,\n              STATES.DELETED\n            ],\n            factory: (\n              itemIsSelected,\n              itemIsNew,\n              itemIsExisting,\n              itemIsChanged,\n              itemIsDeleted\n            ) => {\n              return (item) => {\n                return itemIsSelected(item) ||\n                  itemIsNew(item) ||\n                  itemIsExisting(item) ||\n                  itemIsChanged(item) ||\n                  itemIsDeleted(item);\n              };\n            }\n          }\n        }\n      },\n      [OPERATIONS.RECONCILE]: {\n        subMap: {\n          [STATES.NEW]: {\n            getters: [\n              [SETS.ITEMS, STATES.SELECTED],\n              [SETS.ITEMS, STATES.NEW],\n              [SETS.ITEMS, STATES.EXISTING]\n            ],\n            setters: [\n              [SETS.ACTIVE, STATES.NEW],\n              [SETS.ITEMS, STATES.SELECTED],\n              [SETS.ITEMS, STATES.NEW],\n              [SETS.ITEMS, STATES.EXISTING],\n              [SETS.ERRORS, STATES.NEW]\n            ],\n            factory: (\n              getSelectedItems,\n              getNewItems,\n              getExistingItems,\n              setNewActive,\n              setSelectedItems,\n              setNewItems,\n              setExistingItems,\n              setNewErrors\n            ) => {\n              return async () => {\n                const newItems = getNewItems() || [];\n                const {[STATES.NEW]: reconcileNew} = reconciliationMap;\n\n                if (reconcileNew instanceof Function && newItems.length) {\n                  const selectedItemsList = getSelectedItems() || [];\n                  const replaceSelected = {};\n                  const newErrors = [];\n                  const newNewItems = [];\n                  const existingItems = getExistingItems();\n                  const newExistingItems = {...existingItems};\n\n                  setNewActive(true);\n\n                  for (let i = 0; i < newItems.length; i++) {\n                    const item = newItems[i];\n                    const selectedItemIndex = selectedItemsList.indexOf(item);\n\n                    try {\n                      const newItem = await reconcileNew(item);\n                      const {[primaryKey]: newKey} = newItem;\n\n                      newExistingItems[newKey] = newItem;\n\n                      if (selectedItemIndex !== -1) {\n                        replaceSelected[selectedItemIndex] = newItem;\n                      }\n                    } catch (error) {\n                      newErrors.push(error);\n                      newNewItems.push(item);\n                    }\n                  }\n\n                  setNewErrors(newErrors);\n                  setNewItems(newNewItems);\n                  setExistingItems(newExistingItems);\n                  setSelectedItems(updateList(selectedItemsList, replaceSelected));\n                  setNewActive(false);\n                }\n              };\n            }\n          },\n          [STATES.EXISTING]: {\n            getters: [\n              [SETS.ITEMS, STATES.SELECTED],\n              [SETS.ITEMS, STATES.EXISTING],\n              [SETS.ERRORS, STATES.EXISTING]\n            ],\n            setters: [\n              [SETS.ACTIVE, STATES.EXISTING],\n              [SETS.ITEMS, STATES.SELECTED],\n              [SETS.ITEMS, STATES.EXISTING],\n              [SETS.ERRORS, STATES.EXISTING]\n            ],\n            factory: (\n              getSelectedItems,\n              getExistingItems,\n              getExistingErrors,\n              setExistingActive,\n              setSelectedItems,\n              setExistingItems,\n              setExistingErrors\n            ) => {\n              return async (query = `${Date.now()}`, ...args) => {\n                const {[STATES.EXISTING]: reconcileExisting} = reconciliationMap;\n\n                if (reconcileExisting instanceof Function) {\n                  const selectedItemsList = getSelectedItems() || [];\n                  const replaceSelected = {};\n                  const existingItemsMap = getExistingItems() || {};\n                  const newExistingItemsMap = {\n                    ...existingItemsMap\n                  };\n                  const existingErrors = getExistingErrors() || {};\n                  const newExistingErrors = {...existingErrors};\n\n                  setExistingActive(true);\n\n                  try {\n                    const remoteExistingItems = (await reconcileExisting(query, ...args)) || [];\n\n                    remoteExistingItems.forEach(item => {\n                      const {[primaryKey]: key} = item;\n                      const oldItem = existingItemsMap[key];\n                      const selectedItemIndex = selectedItemsList.indexOf(oldItem);\n\n                      newExistingItemsMap[key] = item;\n\n                      if (selectedItemIndex !== -1) {\n                        replaceSelected[selectedItemIndex] = item;\n                      }\n                    });\n                  } catch (error) {\n                    newExistingErrors[query] = error;\n                  }\n\n                  setExistingErrors(newExistingErrors);\n                  setExistingItems(newExistingItemsMap);\n                  setSelectedItems(updateList(selectedItemsList, replaceSelected));\n                  setExistingActive(false);\n                }\n              };\n            }\n          },\n          [STATES.CHANGED]: {\n            getters: [\n              [SETS.ITEMS, STATES.SELECTED],\n              [SETS.ITEMS, STATES.CHANGED],\n              [SETS.ITEMS, STATES.EXISTING]\n            ],\n            setters: [\n              [SETS.ACTIVE, STATES.CHANGED],\n              [SETS.ITEMS, STATES.SELECTED],\n              [SETS.ITEMS, STATES.CHANGED],\n              [SETS.ITEMS, STATES.EXISTING],\n              [SETS.ERRORS, STATES.CHANGED]\n            ],\n            factory: (\n              getSelectedItems,\n              getChangedItems,\n              getExistingItems,\n              setChangedActive,\n              setSelectedItems,\n              setChangedItems,\n              setExistingItems,\n              setChangedErrors\n            ) => {\n              return async () => {\n                const {[STATES.CHANGED]: reconcileChanged} = reconciliationMap;\n                const changedItems = getChangedItems() || {};\n                const changedItemsList = Object\n                  .keys(changedItems)\n                  .map(key => changedItems[key]);\n\n                if (reconcileChanged instanceof Function && changedItemsList.length) {\n                  const selectedItemsList = getSelectedItems() || [];\n                  const replaceSelected = {};\n                  const existingItems = getExistingItems() || {};\n                  const newExistingItems = {...existingItems};\n                  const newChangedItems = {};\n                  const newChangedErrors = {};\n\n                  setChangedActive(true);\n\n                  for (let i = 0; i < changedItemsList.length; i++) {\n                    const item = changedItemsList[i];\n                    const {[primaryKey]: oldKey} = item;\n                    const oldItem = existingItems[oldKey];\n                    const selectedItemIndex = selectedItemsList.indexOf(oldItem);\n\n                    try {\n                      const newItem = await reconcileChanged(item, oldItem);\n                      const {[primaryKey]: newKey} = newItem;\n\n                      newExistingItems[newKey] = newItem;\n                      delete newExistingItems[oldKey];\n\n                      if (selectedItemIndex !== -1) {\n                        replaceSelected[selectedItemIndex] = newItem;\n                      }\n                    } catch (error) {\n                      newChangedErrors[oldKey] = error;\n                      newChangedItems[oldKey] = item;\n                    }\n                  }\n\n                  setChangedErrors(newChangedErrors);\n                  setChangedItems(newChangedItems);\n                  setExistingItems(newExistingItems);\n                  setSelectedItems(updateList(selectedItemsList, replaceSelected));\n                  setChangedActive(false);\n                }\n              };\n            }\n          },\n          [STATES.DELETED]: {\n            getters: [\n              [SETS.ITEMS, STATES.DELETED],\n              [SETS.ITEMS, STATES.EXISTING]\n            ],\n            setters: [\n              [SETS.ACTIVE, STATES.DELETED],\n              [SETS.ITEMS, STATES.DELETED],\n              [SETS.ITEMS, STATES.EXISTING],\n              [SETS.ERRORS, STATES.DELETED]\n            ],\n            factory: (\n              getDeletedItems,\n              getExistingItems,\n              setDeletedActive,\n              setDeletedItems,\n              setExistingItems,\n              setDeletedErrors\n            ) => {\n              return async () => {\n                const {[STATES.DELETED]: reconcileDeleted} = reconciliationMap;\n                const deletedItems = getDeletedItems() || {};\n                const deletedItemsList = Object\n                  .keys\n                  .map(key => deletedItems[key]);\n\n                if (reconcileDeleted instanceof Function && deletedItemsList.length) {\n                  const existingItems = getExistingItems() || {};\n                  const newExistingItems = {...existingItems};\n                  const newDeletedItems = {};\n                  const newDeletedErrors = {};\n\n                  setDeletedActive(true);\n\n                  for (let i = 0; i < deletedItemsList.length; i++) {\n                    const item = deletedItemsList[i];\n                    const {[primaryKey]: key} = item;\n\n                    try {\n                      await reconcileDeleted(item);\n\n                      delete newExistingItems[key];\n                    } catch (error) {\n                      newDeletedErrors[key] = error;\n                      newDeletedItems[key] = item;\n                    }\n                  }\n\n                  setDeletedErrors(newDeletedErrors);\n                  setDeletedItems(newDeletedItems);\n                  setExistingItems(newExistingItems);\n                  setDeletedActive(false);\n                }\n              };\n            }\n          },\n          [STATES.ALL]: {\n            required: [\n              STATES.CHANGED,\n              STATES.DELETED,\n              STATES.NEW,\n              STATES.EXISTING\n            ],\n            factory: (\n              reconcileChanged,\n              reconcileDeleted,\n              reconcileNew,\n              reconcileExisting\n            ) => {\n              return async () => {\n                // TRICKY: IMPORTANT: The order matters.\n                // Make your changes.\n                await reconcileChanged();\n                // Delete item, that may have even just been changed.\n                await reconcileDeleted();\n                // Add any new items.\n                await reconcileNew();\n                // Get the results.\n                await reconcileExisting();\n              };\n            }\n          }\n        }\n      },\n      [OPERATIONS.SELECT]: {\n        required: [\n          [OPERATIONS.IS, STATES.SELECTED]\n        ],\n        getters: [\n          [SETS.ITEMS, STATES.SELECTED]\n        ],\n        setters: [\n          [SETS.ITEMS, STATES.SELECTED]\n        ],\n        factory: (\n          isSelected,\n          getSelected,\n          setSelected\n        ) => {\n          return (item, moreThanOnce = false) => {\n            if (moreThanOnce || !isSelected(item)) {\n              const selectedList = getSelected() || [];\n              const newSelectedList = [\n                ...selectedList,\n                item\n              ];\n\n              setSelected(newSelectedList);\n            }\n          };\n        }\n      },\n      [OPERATIONS.DESELECT]: {\n        required: [\n          [OPERATIONS.IS, STATES.SELECTED]\n        ],\n        getters: [\n          [SETS.ITEMS, STATES.SELECTED]\n        ],\n        setters: [\n          [SETS.ITEMS, STATES.SELECTED]\n        ],\n        factory: (\n          isSelected,\n          getSelected,\n          setSelected\n        ) => {\n          return (item, moreThanOnce = false) => {\n            if (isSelected(item)) {\n              const selectedList = getSelected() || [];\n              const newSelectedList = [];\n\n              let removedAtLeastOnce = false;\n\n              for (let i = 0; i < selectedList.length; i++) {\n                const selectedItem = selectedList[i];\n\n                if (\n                  item === selectedItem &&\n                  (moreThanOnce || !removedAtLeastOnce)\n                ) {\n                  // Don't keep the selected item.\n                  removedAtLeastOnce = true;\n                } else {\n                  // Keep the selected item.\n                  newSelectedList.push(selectedItem);\n                }\n              }\n\n              setSelected(newSelectedList);\n            }\n          };\n        }\n      },\n      [OPERATIONS.TOGGLE_SELECTION]: {\n        required: [\n          [OPERATIONS.IS, STATES.SELECTED],\n          OPERATIONS.SELECT,\n          OPERATIONS.DESELECT\n        ],\n        factory: (\n          isSelected,\n          select,\n          deselect\n        ) => {\n          return (item) => {\n            if (isSelected(item)) {\n              deselect(item, true);\n            } else {\n              select(item);\n            }\n          };\n        }\n      },\n      [OPERATIONS.CREATE]: {\n        getters: [\n          [SETS.ITEMS, STATES.NEW]\n        ],\n        setters: [\n          [SETS.ITEMS, STATES.NEW]\n        ],\n        factory: (\n          getNewItems,\n          setNewItems\n        ) => {\n          return (item) => {\n            const newItem = {\n              ...item\n            };\n            const newItemList = getNewItems() || [];\n            const newNewItemList = [\n              newItem,\n              ...newItemList\n            ];\n\n            delete newItem[primaryKey];\n\n            setNewItems(newNewItemList);\n\n            return newItem;\n          };\n        }\n      },\n      [OPERATIONS.READ]: {\n        getters: [\n          [SETS.ITEMS, STATES.CHANGED],\n          [SETS.ITEMS, STATES.EXISTING]\n        ],\n        factory: (\n          getChangedItems,\n          getExistingItems\n        ) => {\n          return (key, existingOnly = false) => {\n            const {[key]: changedItem} = getChangedItems() || {};\n            const {[key]: existingItem} = getExistingItems() || {};\n\n            return existingOnly ?\n              existingItem :\n              (\n                !!changedItem ?\n                  changedItem :\n                  existingItem\n              );\n          };\n        }\n      },\n      [OPERATIONS.UPDATE]: {\n        required: [\n          [OPERATIONS.IS, STATES.NEW]\n        ],\n        getters: [\n          [SETS.ITEMS, STATES.SELECTED],\n          [SETS.ITEMS, STATES.NEW],\n          [SETS.ITEMS, STATES.EXISTING],\n          [SETS.ITEMS, STATES.CHANGED]\n        ],\n        setters: [\n          [SETS.ITEMS, STATES.SELECTED],\n          [SETS.ITEMS, STATES.NEW],\n          [SETS.ITEMS, STATES.CHANGED]\n        ],\n        factory: (\n          itemIsNew,\n          getSelectedItems,\n          getNewItems,\n          getExistingItems,\n          getChangedItems,\n          setSelectedItems,\n          setNewItems,\n          setChangedItems\n        ) => {\n          return (newItem, oldItem) => {\n            const selectedItemsList = getSelectedItems() || [];\n            const replaceSelected = {};\n\n            if (itemIsNew(oldItem)) {\n              const newItemsList = getNewItems() || [];\n              const newNewItemsList = [];\n\n              for (let i = 0; i < newItemsList.length; i++) {\n                const itemInNew = newItemsList[i];\n\n                if (oldItem === itemInNew) {\n                  const selectedItemIndex = selectedItemsList.indexOf(oldItem);\n\n                  newNewItemsList.push(newItem);\n\n                  if (selectedItemIndex !== -1) {\n                    replaceSelected[selectedItemIndex] = newItem;\n                  }\n                } else {\n                  newNewItemsList.push(itemInNew);\n                }\n              }\n\n              setNewItems(newNewItemsList);\n            } else {\n              const {[primaryKey]: key} = newItem;\n              const changedItemsMap = getChangedItems() || {};\n              const existingItemsMap = getExistingItems() || {};\n              const oldChangedItem = changedItemsMap[key];\n              const oldExistingItem = existingItemsMap[key];\n              const newChangedItemsMap = {\n                [key]: newItem,\n                ...changedItemsMap\n              };\n              const changedSelectedItemIndex = selectedItemsList.indexOf(oldChangedItem);\n              const existingSelectedItemIndex = selectedItemsList.indexOf(oldExistingItem);\n\n              setChangedItems(newChangedItemsMap);\n\n              if (changedSelectedItemIndex !== -1) {\n                replaceSelected[changedSelectedItemIndex] = newItem;\n              } else if (existingSelectedItemIndex !== -1) {\n                replaceSelected[existingSelectedItemIndex] = newItem;\n              }\n            }\n\n            setSelectedItems(updateList(selectedItemsList, replaceSelected));\n          };\n        }\n      },\n      [OPERATIONS.DELETE]: {\n        required: [\n          [OPERATIONS.IS, STATES.NEW],\n          [OPERATIONS.IS, STATES.CHANGED],\n          OPERATIONS.DESELECT\n        ],\n        getters: [\n          [SETS.ITEMS, STATES.NEW],\n          [SETS.ITEMS, STATES.CHANGED],\n          [SETS.ITEMS, STATES.DELETED]\n        ],\n        setters: [\n          [SETS.ITEMS, STATES.NEW],\n          [SETS.ITEMS, STATES.CHANGED],\n          [SETS.ITEMS, STATES.DELETED]\n        ],\n        factory: (\n          itemIsNew,\n          itemIsChanged,\n          deselectItem,\n          getNewItems,\n          getChangedItems,\n          getDeletedItems,\n          setNewItems,\n          setChangedItems,\n          setDeletedItems\n        ) => {\n          return (item) => {\n            if (itemIsNew(item)) {\n              const newItemsList = getNewItems() || [];\n              const newNewItemsList = [];\n\n              for (let i = 0; i < newItemsList.length; i++) {\n                const itemInNew = newItemsList[i];\n\n                if (item !== itemInNew) {\n                  newNewItemsList.push(itemInNew);\n                }\n              }\n\n              setNewItems(newNewItemsList);\n            } else {\n              const {[primaryKey]: key} = item;\n              const deletedItemsMap = getDeletedItems() || {};\n              const newDeletedItemsMap = {\n                [key]: item,\n                ...deletedItemsMap\n              };\n\n              if (itemIsChanged(item)) {\n                // TRICKY: IMPORTANT: Remove any changed item so that they are not reconciled.\n                const changedItemsMap = getChangedItems() || {};\n                const newChangedItemsMap = {...changedItemsMap};\n\n                delete newChangedItemsMap[key];\n\n                setChangedItems(newChangedItemsMap);\n              }\n\n              setDeletedItems(newDeletedItemsMap);\n            }\n\n            deselectItem(item, true);\n          };\n        }\n      }\n    };\n\n    return (\n      <Incarnate\n        {...props}\n        name={name}\n        map={map}\n      />\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Future/ItemStateController.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "DEFAULT_PRIMARY_KEY",
    "memberof": "src/Future/ItemStateController.jsx",
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~DEFAULT_PRIMARY_KEY",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Future/ItemStateController.jsx",
    "importStyle": "{DEFAULT_PRIMARY_KEY}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "STATES",
    "memberof": "src/Future/ItemStateController.jsx",
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~STATES",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Future/ItemStateController.jsx",
    "importStyle": "{STATES}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"SELECTED\": string, \"NEW\": string, \"EXISTING\": string, \"CHANGED\": string, \"DELETED\": string, \"ALL\": string}"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "SETS",
    "memberof": "src/Future/ItemStateController.jsx",
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~SETS",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Future/ItemStateController.jsx",
    "importStyle": "{SETS}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"ACTIVE\": string, \"ITEMS\": string, \"ERRORS\": string}"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "OPERATIONS",
    "memberof": "src/Future/ItemStateController.jsx",
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~OPERATIONS",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Future/ItemStateController.jsx",
    "importStyle": "{OPERATIONS}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"SELECT\": string, \"DESELECT\": string, \"TOGGLE_SELECTION\": string, \"CREATE\": string, \"READ\": string, \"UPDATE\": string, \"DELETE\": string, \"RECONCILE\": string, \"IS\": string}"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "updateList",
    "memberof": "src/Future/ItemStateController.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~updateList",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Future/ItemStateController.jsx",
    "importStyle": "{updateList}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "replace",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "remove",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "ITEM_IN_MAP_TESTER_FACTORY_FACTORY",
    "memberof": "src/Future/ItemStateController.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~ITEM_IN_MAP_TESTER_FACTORY_FACTORY",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/Future/ItemStateController.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "primaryKey",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "DEFAULT_PRIMARY_KEY",
        "defaultValue": "DEFAULT_PRIMARY_KEY"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "ItemStateController",
    "memberof": "src/Future/ItemStateController.jsx",
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~ItemStateController",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Future/ItemStateController.jsx",
    "importStyle": "ItemStateController",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~PureComponent"
    ]
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Future/ItemStateController.jsx~ItemStateController",
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~ItemStateController.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "src/Future/ItemStateController.jsx~ItemStateController",
    "static": true,
    "longname": "src/Future/ItemStateController.jsx~ItemStateController.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "render",
    "memberof": "src/Future/ItemStateController.jsx~ItemStateController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Future/ItemStateController.jsx~ItemStateController#render",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/Incarnate.jsx",
    "content": "import T from 'prop-types';\nimport React, {Component} from 'react';\nimport IncarnateProper from 'incarnate';\nimport {Provider, Consumer} from './Context';\nimport getDefaultMapKeyDelimiter from './Utils/getDefaultMapKeyDelimiter';\n\nlet INCARNATE_COUNT = 0;\n\nexport default class Incarnate extends Component {\n  static DEFAULT_MAP_KEY = '__INCARNATES__';\n  static propTypes = {\n    name: T.string,\n    subMap: T.objectOf(\n      T.shape({\n        dependencies: T.objectOf(\n          T.string\n        ),\n        getters: T.objectOf(\n          T.string\n        ),\n        setters: T.objectOf(\n          T.string\n        ),\n        invalidators: T.objectOf(\n          T.string\n        ),\n        listeners: T.objectOf(\n          T.string\n        ),\n        strict: T.bool,\n        factory: T.func,\n        handlerAsyncFactoryError: T.func\n      })\n    ),\n    shared: T.objectOf(\n      T.string\n    ),\n    strict: T.bool,\n    incarnateInstanceRef: T.func,\n    handleResolveError: T.func,\n    children: T.node\n  };\n  static defaultProps = {\n    subMap: {}\n  };\n\n  _incarnateHashMatrixKey;\n  mounted = false;\n  incarnate;\n\n  constructor(props) {\n    super(props);\n\n    this._incarnateHashMatrixKey = INCARNATE_COUNT;\n    INCARNATE_COUNT++;\n  }\n\n  componentWillMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  /**\n   * @param {IncarnateProper} parentIncarnate\n   * @param {Object} props\n   * */\n  getIncarnate(parentIncarnate, props = {}) {\n    if (!(this.incarnate instanceof IncarnateProper)) {\n      const {\n        incarnateInstanceRef,\n        ...subMapDeclaration\n      } = props;\n\n      if (parentIncarnate instanceof IncarnateProper) {\n        // Get the Incarnate instance from a parent Incarnate.\n        const {name} = subMapDeclaration;\n        const targetName = name || [\n          Incarnate.DEFAULT_MAP_KEY,\n          this._incarnateHashMatrixKey\n        ].join(getDefaultMapKeyDelimiter(parentIncarnate.pathDelimiter));\n        const targetSubMapDeclaration = {\n          ...subMapDeclaration,\n          name: targetName\n        };\n        const {handleResolveError} = parentIncarnate;\n        const {subMap, subMap: {[targetName]: existingMapEntry} = {}} = parentIncarnate;\n\n        if (!existingMapEntry) {\n          subMap[targetName] = {\n            ...targetSubMapDeclaration,\n            handleResolveError\n          };\n        }\n\n        this.incarnate = parentIncarnate.getDependency(targetName);\n      } else {\n        // Create a standalone Incarnate instance.\n        this.incarnate = new IncarnateProper(subMapDeclaration);\n      }\n\n      if (incarnateInstanceRef instanceof Function) {\n        incarnateInstanceRef(this.incarnate);\n      }\n    }\n\n    return this.incarnate;\n  }\n\n  render() {\n    const {\n      children,\n      ...props\n    } = this.props;\n\n    return (\n      <Consumer>\n        {parentIncarnate => (\n          <Provider\n            value={this.getIncarnate(parentIncarnate, props)}\n          >\n            {children}\n          </Provider>\n        )}\n      </Consumer>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Incarnate.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "INCARNATE_COUNT",
    "memberof": "src/Incarnate.jsx",
    "static": true,
    "longname": "src/Incarnate.jsx~INCARNATE_COUNT",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/Incarnate.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "Incarnate",
    "memberof": "src/Incarnate.jsx",
    "static": true,
    "longname": "src/Incarnate.jsx~Incarnate",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Incarnate.jsx",
    "importStyle": "Incarnate",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "DEFAULT_MAP_KEY",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "static": true,
    "longname": "src/Incarnate.jsx~Incarnate.DEFAULT_MAP_KEY",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "static": true,
    "longname": "src/Incarnate.jsx~Incarnate.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "static": true,
    "longname": "src/Incarnate.jsx~Incarnate.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "_incarnateHashMatrixKey",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#_incarnateHashMatrixKey",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "mounted",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#mounted",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "incarnate",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#incarnate",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "getIncarnate",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#getIncarnate",
    "access": "public",
    "description": "",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "IncarnateProper"
        ],
        "spread": false,
        "optional": false,
        "name": "parentIncarnate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "render",
    "memberof": "src/Incarnate.jsx~Incarnate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Incarnate.jsx~Incarnate#render",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/LifePod.jsx",
    "content": "import T from 'prop-types';\nimport React, {isValidElement, cloneElement, Component} from 'react';\nimport {Consumer} from './Context';\nimport IncarnateProper, {\n  DependencyDeclaration,\n  LifePod as LifePodProper\n} from 'incarnate';\nimport getDefaultMapKeyDelimiter from './Utils/getDefaultMapKeyDelimiter';\n\nconst DEFAULT_FACTORY = (...args) => args;\nconst OVERRIDE_MAP = {\n  name: true,\n  dependencies: true,\n  getters: true,\n  setters: true,\n  invalidators: true,\n  listeners: true,\n  strict: true,\n  noCache: true,\n  factory: true\n};\n\nlet LIFEPOD_COUNT = 0;\n\nfunction getFactoryFromProps(props = {}) {\n  const {\n    factory,\n    mapToProps\n  } = props;\n\n  return mapToProps instanceof Function &&\n  (!(factory instanceof Function) || factory === DEFAULT_FACTORY) ?\n    mapToProps :\n    factory;\n}\n\nfunction getMergedDependencies({\n                                 dependencies,\n                                 getters,\n                                 setters,\n                                 invalidators,\n                                 listeners\n                               } = {}) {\n  return {\n    ...dependencies,\n    ...getters,\n    ...setters,\n    ...invalidators,\n    ...listeners\n  };\n}\n\nexport default class LifePod extends Component {\n  static DEFAULT_MAP_KEY = '__LIFEPODS__';\n  static propTypes = {\n    name: T.string,\n    dependencies: T.objectOf(\n      T.string\n    ),\n    getters: T.objectOf(\n      T.string\n    ),\n    setters: T.objectOf(\n      T.string\n    ),\n    invalidators: T.objectOf(\n      T.string\n    ),\n    listeners: T.objectOf(\n      T.string\n    ),\n    strict: T.bool,\n    noCache: T.bool,\n    factory: T.func,\n    mapToProps: T.func,\n    /**\n     * Override the properties of an preexisting LifePod if one is encountered.\n     * */\n    override: T.bool,\n    handleResolveError: T.func,\n    alwaysRender: T.bool,\n    children: T.oneOfType([\n      T.func,\n      T.element\n    ])\n  };\n  static defaultProps = {\n    factory: DEFAULT_FACTORY,\n    mapToProps: DEFAULT_FACTORY\n  };\n\n  mounted = false;\n\n  parentIncarnate;\n  lifePod;\n\n  _lifePodHashMatrixKey;\n\n  rendering = false;\n\n  constructor(props) {\n    super(props);\n\n    this._lifePodHashMatrixKey = LIFEPOD_COUNT;\n    LIFEPOD_COUNT++;\n  }\n\n  state = {\n    childProps: undefined\n  };\n\n  componentWillMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n\n    this.setLifePod(undefined);\n  }\n\n  initializeRendering() {\n    // TRICKY: If `rendering` is `true`, then it is already being managed.\n    if (!this.rendering) {\n      this.rendering = true;\n\n      setTimeout(() => this.rendering = false, 0);\n    }\n  }\n\n  setLifePod(lifePod) {\n    if (this.lifePod instanceof LifePodProper) {\n      this.lifePod.removeChangeHandler('', this.onChildPropsChange);\n    }\n\n    this.lifePod = lifePod;\n\n    if (this.lifePod instanceof LifePodProper) {\n      this.lifePod.addChangeHandler('', this.onChildPropsChange);\n    }\n  }\n\n  /**\n   * @param {IncarnateProper} parentIncarnate\n   * @param {Object} dependencyDeclaration\n   * */\n  getLifePod(parentIncarnate, dependencyDeclaration = {}) {\n    if (!(this.lifePod instanceof LifePodProper)) {\n      const targetFactory = (...args) => {\n        // TRICKY: Always use the current factory.\n        const factory = getFactoryFromProps(this.props);\n\n        if (factory instanceof Function) {\n          const [\n            rawDependencies,\n            ...otherArgs\n          ] = args || [];\n\n          return factory(getMergedDependencies(rawDependencies), ...otherArgs);\n        }\n      };\n\n      this.parentIncarnate = parentIncarnate;\n\n      if (parentIncarnate instanceof IncarnateProper) {\n        // Get the LifePod instance from a parent Incarnate.\n        const {override} = this.props;\n        const {name} = dependencyDeclaration;\n        const targetName = name || [\n          LifePod.DEFAULT_MAP_KEY,\n          this._lifePodHashMatrixKey\n        ].join(getDefaultMapKeyDelimiter(parentIncarnate.pathDelimiter));\n        const {subMap, subMap: {[targetName]: existingMapEntry} = {}} = parentIncarnate;\n        const targetConfig = {\n          ...dependencyDeclaration,\n          name: targetName,\n          factory: targetFactory\n        };\n\n        if (!existingMapEntry) {\n          subMap[targetName] = targetConfig;\n        }\n\n        const lifePodInstance = parentIncarnate.getDependency(targetName);\n\n        // TRICKY: If `override` is `true`, override only the relevant properties on the existing LifePod with the\n        // values from a temporary LifePod created by the `parentIncarnate`.\n        if (!!existingMapEntry && override && lifePodInstance instanceof LifePodProper) {\n          const tempDepDec = new DependencyDeclaration(targetConfig);\n          const tempLifePod = parentIncarnate.createLifePod(targetName, tempDepDec);\n\n          for (const k in OVERRIDE_MAP) {\n            lifePodInstance[k] = tempLifePod[k];\n          }\n        }\n\n        this.setLifePod(lifePodInstance);\n      } else {\n        // Create a standalone LifePod instance.\n        this.setLifePod(new LifePodProper(\n          new DependencyDeclaration({\n            ...dependencyDeclaration,\n            factory: targetFactory\n          })\n        ));\n      }\n    }\n\n    return this.lifePod;\n  }\n\n  safeSetState = (...args) => {\n    if (this.mounted) {\n      if (!this.rendering) {\n        try {\n          // IMPORTANT: Don't break the rendering cycle.\n          this.setState(...args);\n        } catch (error) {\n          // Ignore.\n        }\n      } else {\n        setTimeout(() => this.safeSetState(...args), 0);\n      }\n    }\n  };\n\n  handleResolveError = (error) => {\n    const {handleResolveError} = this.props;\n\n    if (handleResolveError instanceof Function) {\n      handleResolveError(error);\n    }\n\n    if (\n      this.parentIncarnate instanceof IncarnateProper &&\n      this.parentIncarnate.handleResolveError instanceof Function\n    ) {\n      this.parentIncarnate.handleResolveError(error);\n    }\n  };\n\n  getChildProps() {\n    let childProps;\n\n    if (this.lifePod instanceof LifePodProper) {\n      try {\n        const value = this.lifePod.getValue();\n\n        if (!(value instanceof Promise)) {\n          childProps = value;\n        }\n      } catch (error) {\n        this.handleResolveError(error);\n      }\n    }\n\n    return childProps;\n  }\n\n  onChildPropsChange = () => {\n    this.safeSetState({\n      childProps: this.getChildProps()\n    });\n  };\n\n  renderChildren() {\n    const {\n      children,\n      alwaysRender\n    } = this.props;\n    const factory = getFactoryFromProps(this.props);\n    const currentChildProps = this.getChildProps();\n    const {childProps: childPropsFromState} = this.state;\n    const childProps = typeof currentChildProps !== 'undefined' && alwaysRender ?\n      childPropsFromState :\n      currentChildProps;\n\n    if (typeof childProps !== 'undefined' || alwaysRender) {\n      if (children instanceof Function) {\n        if (factory === DEFAULT_FACTORY && childProps instanceof Array) {\n          return children(...childProps);\n        } else {\n          return children(childProps);\n        }\n      } else if (isValidElement(children)) {\n        const {props: baseChildProps = {}} = children;\n\n        return cloneElement(children, {\n          ...childProps,\n          ...baseChildProps\n        });\n      } else {\n        return children;\n      }\n    }\n  }\n\n  render() {\n    const {\n      children,\n      alwaysRender,\n      handleResolveError,\n      override,\n      factory,\n      mapToProps,\n      ...dependencyDeclaration\n    } = this.props;\n\n    this.initializeRendering();\n\n    return (\n      <Consumer>\n        {parentInstance => {\n          this.getLifePod(parentInstance, dependencyDeclaration);\n\n          return this.renderChildren();\n        }}\n      </Consumer>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/LifePod.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "DEFAULT_FACTORY",
    "memberof": "src/LifePod.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/LifePod.jsx~DEFAULT_FACTORY",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/LifePod.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "OVERRIDE_MAP",
    "memberof": "src/LifePod.jsx",
    "static": true,
    "longname": "src/LifePod.jsx~OVERRIDE_MAP",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/LifePod.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": boolean, \"dependencies\": boolean, \"getters\": boolean, \"setters\": boolean, \"invalidators\": boolean, \"listeners\": boolean, \"strict\": boolean, \"noCache\": boolean, \"factory\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "LIFEPOD_COUNT",
    "memberof": "src/LifePod.jsx",
    "static": true,
    "longname": "src/LifePod.jsx~LIFEPOD_COUNT",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/LifePod.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "getFactoryFromProps",
    "memberof": "src/LifePod.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/LifePod.jsx~getFactoryFromProps",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/LifePod.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "getMergedDependencies",
    "memberof": "src/LifePod.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/LifePod.jsx~getMergedDependencies",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/LifePod.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"dependencies\": *, \"getters\": *, \"setters\": *, \"invalidators\": *, \"listeners\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "{...dependencies: Object, ...getters: Object, ...setters: Object, ...invalidators: Object, ...listeners: Object}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "LifePod",
    "memberof": "src/LifePod.jsx",
    "static": true,
    "longname": "src/LifePod.jsx~LifePod",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/LifePod.jsx",
    "importStyle": "LifePod",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "DEFAULT_MAP_KEY",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": true,
    "longname": "src/LifePod.jsx~LifePod.DEFAULT_MAP_KEY",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": true,
    "longname": "src/LifePod.jsx~LifePod.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": true,
    "longname": "src/LifePod.jsx~LifePod.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "mounted",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#mounted",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "parentIncarnate",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#parentIncarnate",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "lifePod",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#lifePod",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "_lifePodHashMatrixKey",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#_lifePodHashMatrixKey",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "rendering",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#rendering",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "state",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#state",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "initializeRendering",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#initializeRendering",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "setLifePod",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#setLifePod",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "lifePod",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "getLifePod",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#getLifePod",
    "access": "public",
    "description": "",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "IncarnateProper"
        ],
        "spread": false,
        "optional": false,
        "name": "parentIncarnate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dependencyDeclaration",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "safeSetState",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#safeSetState",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "handleResolveError",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#handleResolveError",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "getChildProps",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#getChildProps",
    "access": "public",
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "onChildPropsChange",
    "memberof": "src/LifePod.jsx~LifePod",
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#onChildPropsChange",
    "access": "public",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "renderChildren",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#renderChildren",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "render",
    "memberof": "src/LifePod.jsx~LifePod",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/LifePod.jsx~LifePod#render",
    "access": "public",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/Routing/IncarnateRedirect.jsx",
    "content": "import T from 'prop-types';\nimport React, {Component} from 'react';\nimport {Consumer} from './RoutingContext';\nimport {Redirect} from 'react-router-dom';\nimport {getUrl} from './IncarnateRoute';\n\nexport default class IncarnateRedirect extends Component {\n  static propTypes = {\n    ...Redirect.propTypes,\n    from: T.string,\n    to: T.string\n  };\n\n  render() {\n    const {\n      from,\n      to,\n      ...props\n    } = this.props;\n\n    return (\n      <Consumer>\n        {({parentUrl}) => (\n          <Redirect\n            {...props}\n            from={typeof from === 'string' ? getUrl(parentUrl, from) : from}\n            to={getUrl(parentUrl, to)}\n          />\n        )}\n      </Consumer>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Routing/IncarnateRedirect.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "class",
    "name": "IncarnateRedirect",
    "memberof": "src/Routing/IncarnateRedirect.jsx",
    "static": true,
    "longname": "src/Routing/IncarnateRedirect.jsx~IncarnateRedirect",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateRedirect.jsx",
    "importStyle": "IncarnateRedirect",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Routing/IncarnateRedirect.jsx~IncarnateRedirect",
    "static": true,
    "longname": "src/Routing/IncarnateRedirect.jsx~IncarnateRedirect.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "render",
    "memberof": "src/Routing/IncarnateRedirect.jsx~IncarnateRedirect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Routing/IncarnateRedirect.jsx~IncarnateRedirect#render",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/Routing/IncarnateRoute.jsx",
    "content": "import QueryString from 'query-string';\nimport T from 'prop-types';\nimport React, {Component} from 'react';\nimport {Route} from 'react-router-dom';\nimport {Provider, Consumer} from './RoutingContext';\nimport Incarnate, {LifePod} from '../index';\n\nconst URL_DELIMITER = '/';\nconst CLASS_IDENTIFIER = {};\n\nexport const PATH_NAMES = {\n  ROUTE_PROPS_LIST: 'ROUTE_PROPS_LIST',\n  ROUTE_PROPS: 'ROUTE_PROPS'\n};\n\nexport function getUrl(parentUrl = '', url = '') {\n  const parentEndsWithDelimiter = parentUrl.split('').reverse()[0] === URL_DELIMITER;\n  const urlStartsWithDelimiter = url.split('')[0] === URL_DELIMITER;\n\n  if (parentEndsWithDelimiter && urlStartsWithDelimiter) {\n    const newParent = parentUrl.slice(0, -1);\n\n    return `${newParent}${url}`;\n  } else if (parentEndsWithDelimiter || urlStartsWithDelimiter) {\n    return `${parentUrl}${url}`;\n  } else {\n    return `${parentUrl}${URL_DELIMITER}${url}`;\n  }\n}\n\nexport function getParamsObjectFromRouteProps({match: {params} = {}} = {}) {\n  return params;\n}\n\nexport function getQueryObjectFromRouteProps({location: {search = ''} = {}} = {}) {\n  return QueryString.parse(\n    search,\n    {\n      arrayFormat: 'bracket'\n    }\n  );\n}\n\nexport default class IncarnateRoute extends Component {\n  // TRICKY: Use this to see if a React element is of the IncarnateRoute class type in IncarnateSwitch.\n  // React, somehow manipulates the type of an element and a class function equality test is not directly possible.\n  static CLASS_IDENTIFIER = () => CLASS_IDENTIFIER;\n  static propTypes = {\n    ...Route.propTypes,\n    subPath: T.string,\n    CLASS_IDENTIFIER: T.any\n  };\n  static defaultProps = {\n    CLASS_IDENTIFIER: IncarnateRoute.CLASS_IDENTIFIER\n  };\n\n  render() {\n    const {\n      path,\n      subPath,\n      children,\n      ...props\n    } = this.props;\n\n    return (\n      <Consumer>\n        {({parentUrl, routePropsList = []}) => {\n          const fullPath = typeof subPath === 'string' ? getUrl(parentUrl, subPath) : path;\n\n          return (\n            <Route\n              {...props}\n              path={fullPath}\n              render={routeProps => {\n                const newRouteProps = {\n                  ...routeProps,\n                  params: getParamsObjectFromRouteProps(routeProps),\n                  query: getQueryObjectFromRouteProps(routeProps)\n                };\n                const newRoutePropsList = [\n                  newRouteProps,\n                  ...routePropsList\n                ];\n\n                return (\n                  <Provider\n                    value={{\n                      parentUrl: fullPath,\n                      routePropsList: newRoutePropsList\n                    }}\n                  >\n                    <LifePod\n                      name={PATH_NAMES.ROUTE_PROPS_LIST}\n                      noCache\n                      override\n                      factory={() => newRoutePropsList}\n                    />\n                    <Incarnate\n                      name={PATH_NAMES.ROUTE_PROPS}\n                    >\n                      {Object\n                        .keys(newRouteProps)\n                        .map(k => (\n                          <LifePod\n                            key={`${PATH_NAMES.ROUTE_PROPS}:${k}`}\n                            name={k}\n                            noCache\n                            override\n                            factory={() => newRouteProps[k]}\n                          />\n                        ))}\n                    </Incarnate>\n                    {children instanceof Function ? children(newRouteProps) : children}\n                  </Provider>\n                );\n              }}\n            />\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "URL_DELIMITER",
    "memberof": "src/Routing/IncarnateRoute.jsx",
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~URL_DELIMITER",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "CLASS_IDENTIFIER",
    "memberof": "src/Routing/IncarnateRoute.jsx",
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~CLASS_IDENTIFIER",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "PATH_NAMES",
    "memberof": "src/Routing/IncarnateRoute.jsx",
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~PATH_NAMES",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "importStyle": "{PATH_NAMES}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"ROUTE_PROPS_LIST\": string, \"ROUTE_PROPS\": string}"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "getUrl",
    "memberof": "src/Routing/IncarnateRoute.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~getUrl",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "importStyle": "{getUrl}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "parentUrl",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "url",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "getParamsObjectFromRouteProps",
    "memberof": "src/Routing/IncarnateRoute.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~getParamsObjectFromRouteProps",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "importStyle": "{getParamsObjectFromRouteProps}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"match\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "getQueryObjectFromRouteProps",
    "memberof": "src/Routing/IncarnateRoute.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~getQueryObjectFromRouteProps",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "importStyle": "{getQueryObjectFromRouteProps}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"location\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "IncarnateRoute",
    "memberof": "src/Routing/IncarnateRoute.jsx",
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~IncarnateRoute",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateRoute.jsx",
    "importStyle": "IncarnateRoute",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "CLASS_IDENTIFIER",
    "memberof": "src/Routing/IncarnateRoute.jsx~IncarnateRoute",
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~IncarnateRoute.CLASS_IDENTIFIER",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Routing/IncarnateRoute.jsx~IncarnateRoute",
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~IncarnateRoute.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "defaultProps",
    "memberof": "src/Routing/IncarnateRoute.jsx~IncarnateRoute",
    "static": true,
    "longname": "src/Routing/IncarnateRoute.jsx~IncarnateRoute.defaultProps",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "render",
    "memberof": "src/Routing/IncarnateRoute.jsx~IncarnateRoute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Routing/IncarnateRoute.jsx~IncarnateRoute#render",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/Routing/IncarnateRouter.jsx",
    "content": "import React, {Component} from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport Incarnate from '../Incarnate';\n\nfunction removeProps(from = {}, by = {}) {\n  return Object.keys(from)\n    .reduce((acc, k) => {\n      if (!by.hasOwnProperty(k)) {\n        acc[k] = from[k];\n      }\n\n      return acc;\n    }, {});\n}\n\nexport default class IncarnateRouter extends Component {\n  static propTypes = {\n    ...BrowserRouter.propTypes,\n    ...Incarnate.propTypes\n  };\n\n  render() {\n    const {children} = this.props;\n    const browserRouterProps = removeProps(this.props, Incarnate.propTypes);\n    const incarnateProps = removeProps(this.props, BrowserRouter.propTypes);\n\n    delete browserRouterProps.children;\n    delete incarnateProps.children;\n\n    return (\n      <BrowserRouter\n        {...browserRouterProps}\n      >\n        <Incarnate\n          {...incarnateProps}\n        >\n          {children}\n        </Incarnate>\n      </BrowserRouter>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Routing/IncarnateRouter.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "removeProps",
    "memberof": "src/Routing/IncarnateRouter.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Routing/IncarnateRouter.jsx~removeProps",
    "access": "public",
    "export": false,
    "importPath": "incarnate-dom/src/Routing/IncarnateRouter.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "from",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "by",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "class",
    "name": "IncarnateRouter",
    "memberof": "src/Routing/IncarnateRouter.jsx",
    "static": true,
    "longname": "src/Routing/IncarnateRouter.jsx~IncarnateRouter",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateRouter.jsx",
    "importStyle": "IncarnateRouter",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Routing/IncarnateRouter.jsx~IncarnateRouter",
    "static": true,
    "longname": "src/Routing/IncarnateRouter.jsx~IncarnateRouter.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "render",
    "memberof": "src/Routing/IncarnateRouter.jsx~IncarnateRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Routing/IncarnateRouter.jsx~IncarnateRouter#render",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/Routing/IncarnateSwitch.jsx",
    "content": "import T from 'prop-types';\nimport React, {cloneElement, Children, Component} from 'react';\nimport {Switch} from 'react-router-dom';\nimport {Consumer} from './RoutingContext';\nimport IncarnateRoute, {getUrl} from './IncarnateRoute';\nimport IncarnateRedirect from './IncarnateRedirect';\n\nexport default class IncarnateSwitch extends Component {\n  static propTypes = {\n    ...Switch.propTypes,\n    defaultSubPath: T.string\n  };\n\n  render() {\n    const {\n      defaultSubPath,\n      children,\n      ...props\n    } = this.props;\n\n    return (\n      <Consumer>\n        {({parentUrl}) => {\n          const defaultRedirect = typeof defaultSubPath === 'string' ?\n            (\n              <IncarnateRedirect\n                to={defaultSubPath}\n                replace={true}\n              />\n            ) :\n            undefined;\n\n          return (\n            <Switch\n              {...props}\n            >\n              {Children.map(children, element => {\n                const {props: childProps = {}} = element || {};\n                const {CLASS_IDENTIFIER} = childProps;\n\n                if (\n                  CLASS_IDENTIFIER instanceof Function &&\n                  CLASS_IDENTIFIER() === IncarnateRoute.CLASS_IDENTIFIER()\n                ) {\n                  const {subPath} = childProps;\n\n                  return cloneElement(\n                    element,\n                    {\n                      ...childProps,\n                      path: getUrl(parentUrl, subPath)\n                    }\n                  );\n                } else {\n                  return element;\n                }\n              })}\n              {defaultRedirect}\n            </Switch>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Routing/IncarnateSwitch.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "IncarnateSwitch",
    "memberof": "src/Routing/IncarnateSwitch.jsx",
    "static": true,
    "longname": "src/Routing/IncarnateSwitch.jsx~IncarnateSwitch",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/IncarnateSwitch.jsx",
    "importStyle": "IncarnateSwitch",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "propTypes",
    "memberof": "src/Routing/IncarnateSwitch.jsx~IncarnateSwitch",
    "static": true,
    "longname": "src/Routing/IncarnateSwitch.jsx~IncarnateSwitch.propTypes",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "render",
    "memberof": "src/Routing/IncarnateSwitch.jsx~IncarnateSwitch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Routing/IncarnateSwitch.jsx~IncarnateSwitch#render",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/Routing/RoutingContext.jsx",
    "content": "import {createContext} from 'react';\n\nexport const {Provider, Consumer} = createContext(\n  {\n    parentUrl: undefined,\n    routePropsList: []\n  }\n);\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Routing/RoutingContext.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "Provider",
    "memberof": "src/Routing/RoutingContext.jsx",
    "static": true,
    "longname": "src/Routing/RoutingContext.jsx~Provider",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Routing/RoutingContext.jsx",
    "importStyle": "{Provider}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/Utils/getDefaultMapKeyDelimiter.jsx",
    "content": "export default function getDefaultMapKeyDelimiter(currentIncarnateDelimiter) {\n  return currentIncarnateDelimiter === '.' ? '|' : '.';\n}\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/Utils/getDefaultMapKeyDelimiter.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "getDefaultMapKeyDelimiter",
    "memberof": "src/Utils/getDefaultMapKeyDelimiter.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/getDefaultMapKeyDelimiter.jsx~getDefaultMapKeyDelimiter",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom/src/Utils/getDefaultMapKeyDelimiter.jsx",
    "importStyle": "getDefaultMapKeyDelimiter",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "currentIncarnateDelimiter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/index.jsx",
    "content": "import CollectionInternal from './Control/Collection';\nimport ExplicitlyCachedValueInternal from './Control/ExplicitlyCachedValue';\nimport MemoizeInternal from './Control/Memoize';\nimport TraverseInternal from './Control/Traverse';\nimport IncarnateRouterInternal from './Routing/IncarnateRouter';\nimport IncarnateRouteInternal from './Routing/IncarnateRoute';\nimport IncarnateSwitchInternal from './Routing/IncarnateSwitch';\nimport IncarnateRedirectInternal from './Routing/IncarnateRedirect';\nimport LifePodInternal from './LifePod';\nimport IncarnateInternal from './Incarnate';\n\nexport const Collection = CollectionInternal;\n\nexport const ExplicitlyCachedValue = ExplicitlyCachedValueInternal;\n\nexport const Memoize = MemoizeInternal;\n\nexport const Traverse = TraverseInternal;\n\nexport const IncarnateRouter = IncarnateRouterInternal;\n\nexport const IncarnateRoute = IncarnateRouteInternal;\n\nexport const IncarnateSwitch = IncarnateSwitchInternal;\n\nexport const IncarnateRedirect = IncarnateRedirectInternal;\n\nexport const LifePod = LifePodInternal;\n\nexport const Incarnate = IncarnateInternal;\n\nexport default Incarnate;\n",
    "static": true,
    "longname": "/Users/ryan/Projects/incarnate-dom/src/index.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "Collection",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~Collection",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{Collection}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "ExplicitlyCachedValue",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~ExplicitlyCachedValue",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{ExplicitlyCachedValue}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "Memoize",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~Memoize",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{Memoize}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "Traverse",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~Traverse",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{Traverse}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "IncarnateRouter",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~IncarnateRouter",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{IncarnateRouter}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "IncarnateRoute",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~IncarnateRoute",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{IncarnateRoute}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "IncarnateSwitch",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~IncarnateSwitch",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{IncarnateSwitch}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "IncarnateRedirect",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~IncarnateRedirect",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{IncarnateRedirect}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "LifePod",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~LifePod",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{LifePod}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "Incarnate",
    "memberof": "src/index.jsx",
    "static": true,
    "longname": "src/index.jsx~Incarnate",
    "access": "public",
    "export": true,
    "importPath": "incarnate-dom",
    "importStyle": "{Incarnate}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Demo\n\n## API Docs\n\nhttp://dom.incarnate.resist.design/api\n\n## Build/Run\n\n1. Create An App: `rdx app`\n1. Compile: `rdx compile` or `rdx compile -a src/index.html`\n1. Serve: `rdx serve` or `rdx serve -a src/index.html`\n",
    "longname": "/Users/ryan/Projects/incarnate-dom/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]